Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

 

Example 1:


Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Example 2:

Input: preorder = [1,3]
Output: [1,null,3]
 

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 1000
All the values of preorder are unique.


code:------------------------------------------------------------>
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* builtTree(vector<int> &preorder,int ps, int pe, vector<int> &inorder, int is,int ie, map<int,int> mpp){
        if(ps > pe || is > ie){
            return NULL;
        }
        TreeNode* root = new TreeNode(preorder[ps]);

        int inRoot = mpp[root->val];
        int numLeft = inRoot - is;

        root->left = builtTree(preorder, ps+1,ps+numLeft ,inorder, is, inRoot - 1, mpp);
        root->right = builtTree(preorder, ps + numLeft + 1,pe, inorder, inRoot + 1, ie,mpp);

        return root;
    }
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        vector<int> inorder;
        for(auto val : preorder){
            inorder.push_back(val);
        }
        sort(inorder.begin(),inorder.end());
        map<int,int> mpp;

        for(int i=0;i<inorder.size();i++){
            mpp[inorder[i]] = i;
        }

        return builtTree(preorder, 0, preorder.size()-1,inorder,0,inorder.size()-1,mpp);
    }
};
