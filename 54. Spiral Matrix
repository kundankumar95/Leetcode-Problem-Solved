Given an m x n matrix, return all elements of the matrix in spiral order.

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


code:- 
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> vec;
        if (matrix.empty()) return vec;

        int row = matrix.size();
        int col = matrix[0].size();
        int up = 0;
        int down = row - 1;
        int left = 0;
        int right = col - 1;

        while (up <= down && left <= right) {
            for (int i = left; i <= right; i++) {
                vec.push_back(matrix[up][i]);
            }
            up++;

            for (int i = up; i <= down; i++) {
                vec.push_back(matrix[i][right]);
            }
            right--;

            if (up <= down) {
                for (int i = right; i >= left; i--) {
                    vec.push_back(matrix[down][i]);
                }
                down--;
            }

            if (left <= right) {
                for (int i = down; i >= up; i--) {
                    vec.push_back(matrix[i][left]);
                }
                left++;
            }
        }

        return vec;
    }
};
