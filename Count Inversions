Given an array of integers. Find the Inversion Count in the array.  Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).
Input: arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.
Input: arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.
Expected Time Complexity: O(n*logn).
Expected Auxiliary Space: O(n).

Constraints:
1 ≤ arr.size(),arr[i] ≤ 10^5


// code
class Solution {
    long long int merge(vector<long long> &arr, long long int low, long long int high, long long int mid) {
        vector<long long> temp(high - low + 1);  
        long long int ptr1 = low, ptr2 = mid + 1, pos = 0, invCnt = 0;

    
        while (ptr1 <= mid && ptr2 <= high) {
            if (arr[ptr1] <= arr[ptr2]) {
                temp[pos++] = arr[ptr1++];
            } else {
                temp[pos++] = arr[ptr2++];
                invCnt += (mid - ptr1 + 1);
            }
        }

    
        while (ptr1 <= mid) {
            temp[pos++] = arr[ptr1++];
        }

    
        while (ptr2 <= high) {
            temp[pos++] = arr[ptr2++];
        }


        for (long long int i = 0; i < pos; i++) {
            arr[low + i] = temp[i];
        }

        return invCnt;
    }

    long long mergeSort(vector<long long> &arr, long long int low, long long int high) {
        if (low >= high) return 0;  

        long long int mid = low + (high - low) / 2;
        long long int invCnt = mergeSort(arr, low, mid);     
        invCnt += mergeSort(arr, mid + 1, high);        
        invCnt += merge(arr, low, high, mid);           

        return invCnt;
    }

  public:
    long long int inversionCount(vector<long long> &arr) {
        return mergeSort(arr, 0, arr.size() - 1);
    }
};
